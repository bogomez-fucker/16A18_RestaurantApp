/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package restaurant.view;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import restaurant.model.Bill;
import restaurant.model.Dish;
import restaurant.model.Order;
import restaurant.util.FileDB;

/**
 *
 * @author User
 */
public class Administrator extends javax.swing.JFrame {
    
    private final Timer ordersTimer;
    private final Timer billsTimer;
    private List<Order> lastOrders = new ArrayList<>();
    private List<Bill> lastBills = new ArrayList<>();
    
    /**
     * Creates new form Administrator
     */
    public Administrator() {
        initComponents();
        
        jTree1.setRootVisible(false);
        jTree2.setRootVisible(false);
        
        ordersTimer = new Timer(0, (ActionEvent e) -> {
            List<Order> orders = FileDB.getInstance().getOrders();
            
            if (orders.isEmpty())
                fillOrdersTree(orders); // wipe default data
            if (!orders.equals(lastOrders)) {
                lastOrders = orders;
                fillOrdersTree(orders.stream()
                    .filter(x -> x.isAccepted() == false)
                    .collect(Collectors.toList()));
            }
        });
        
        ordersTimer.setDelay(5 * 1000); // 5 sec
        ordersTimer.start();
        
        billsTimer = new Timer(0, (ActionEvent e) -> {
            List<Bill> bills = FileDB.getInstance().getBills();
            
            if (bills.isEmpty())
                fillBillsTree(bills); // wipe default data
            if (!bills.equals(lastBills)) {
                lastBills = bills;
                fillBillsTree(bills.stream()
                    .filter(x -> x.isBilled() == false)
                    .collect(Collectors.toList()));
            }
        });
        
        billsTimer.setDelay(5 * 1000); // 5 sec
        billsTimer.start();
    }
    
    private void fillBillsTree(List<Bill> bills) {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Bills");
        
        for (Bill b : bills) {
            DefaultMutableTreeNode billNode = new DefaultMutableTreeNode("Bill " + b.getId() +
                    " = " + b.getAmount() + " UAH");
            
            billNode.add(new DefaultMutableTreeNode("id: " + b.getId()));
            billNode.add(new DefaultMutableTreeNode("order id: " + b.getId_order()));
            billNode.add(new DefaultMutableTreeNode("amount: " + b.getAmount()));
            billNode.add(new DefaultMutableTreeNode("billed: " + b.isBilled()));
            billNode.add(new DefaultMutableTreeNode("requested for payment: " + b.isRequestedForPayment()));
            
            root.add(billNode);
        }
        
        DefaultTreeModel dtm = (DefaultTreeModel)jTree2.getModel();
        
        dtm.setRoot(root);
    }
    
    private void fillOrdersTree(List<Order> orders) {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Orders");

        for (Order o : orders) {
            DefaultMutableTreeNode order  = new DefaultMutableTreeNode("Order " + o.getId());
            
            for (Dish d : o.getDishes()) {
                DefaultMutableTreeNode dishNode = new DefaultMutableTreeNode(d.getName());
                
                dishNode.add(new DefaultMutableTreeNode("id: " + d.getId()));
                dishNode.add(new DefaultMutableTreeNode("name: " + d.getName()));
                dishNode.add(new DefaultMutableTreeNode("description: " + d.getDescription()));
                dishNode.add(new DefaultMutableTreeNode("cooking time: " + d.getCookingTime()));
                dishNode.add(new DefaultMutableTreeNode("price: " + d.getPrice()));
                dishNode.add(new DefaultMutableTreeNode("type: " + d.getType()));
                
                order.add(dishNode);
            }
            
            root.add(order);
        }
        
        DefaultTreeModel dtm = (DefaultTreeModel)jTree1.getModel();
        
        dtm.setRoot(root);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jButton3 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTree2 = new javax.swing.JTree();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Restaurant App | Administrator");
        setPreferredSize(new java.awt.Dimension(500, 800));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Administrator control panel");

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Orders"));
        jScrollPane3.setViewportView(jTree1);

        jButton3.setText("Accept");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Active bills"));
        jScrollPane4.setViewportView(jTree2);

        jButton4.setText("Decline");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Cancel bill");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton1.setText("Request payment");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton5))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Find selected for acception orders
        TreePath[] selectionPaths = jTree1.getSelectionPaths();
        
        if (selectionPaths == null) {
            JOptionPane.showMessageDialog(this, "No one order selected!");
            
            return;
        }
        
        List<Long> acceptedIds = new ArrayList<>();
        
        for (TreePath path : selectionPaths) { // for every selected order
            long orderId = Long.valueOf(String.valueOf(
                    path.getPath()[1]).split(" ")[1]);
            
            acceptedIds.add(orderId);
        }
        
        List<Order> orders = FileDB.getInstance().getOrders();
        
        // Change status of accepted orders
        orders.stream()
                .filter(x -> acceptedIds.contains(x.getId()))
                .forEach(x -> x.setAccepted(true));
        
        // Write out orders
        FileDB.getInstance().setOrders(orders, false);
        
        // Redraw orders tree
        ordersTimer.stop();
        ordersTimer.start();
        
        // Get accepted orders
        List<Order> acceptedOrders = orders.stream()
                .filter(x -> acceptedIds.contains(x.getId()))
                .collect(Collectors.toList());
        
        // Create Bills
        List<Bill> bills = new ArrayList<>();
        
        for (Order o : acceptedOrders) {
            try {
                Thread.sleep(1);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
            Long billId = new Date().getTime();
            Long orderId = o.getId();
            Double amount = o.getDishes().stream()
                    .map(Dish::getPrice)
                    .reduce((left, right) -> left + right)
                    .orElse(0.0);
            boolean billed = false;
            boolean reqForPayment = false;
            
            bills.add(new Bill(billId, orderId, amount, billed, reqForPayment));
        }
        
        // Write out bills
        FileDB.getInstance().setBills(bills, true);
        
        // Redraw billstree
        billsTimer.stop();
        billsTimer.start();
        
        String acceptedIdsStr = acceptedIds.stream()
                .map(x -> String.valueOf(x))
                .collect(Collectors.joining(", "));
        
        JOptionPane.showMessageDialog(this, "Orders " + acceptedIdsStr + " accepted!");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        // Find selected orders
        TreePath[] selectionPaths = jTree1.getSelectionPaths();
        
        if (selectionPaths == null) {
            JOptionPane.showMessageDialog(this, "No one order selected!");
            
            return;
        }
        
        // Get selected orders
        List<Long> selectedIds = new ArrayList<>();
        
        for (TreePath path : selectionPaths) { // for every selected order
            long orderId = Long.valueOf(String.valueOf(
                    path.getPath()[1]).split(" ")[1]);
            
            selectedIds.add(orderId);
        }
        
        // Filter out declined
        List<Order> ordersWithoutDeclined = FileDB.getInstance().getOrders()
                .stream()
                .filter(x -> !selectedIds.contains(x.getId()))
                .collect(Collectors.toList());
        
        // Write result
        FileDB.getInstance().setOrders(ordersWithoutDeclined, false);
        
        // Redraw orders tree
        ordersTimer.stop();
        ordersTimer.start();
        
        // Notify user
        String declinedIdsStr = selectedIds.stream()
                .map(x -> String.valueOf(x))
                .collect(Collectors.joining(", "));
        
        JOptionPane.showMessageDialog(this, "Orders " + declinedIdsStr + " declined!");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        // Find selected bills
        TreePath[] selectionPaths = jTree2.getSelectionPaths();
        
        if (selectionPaths == null) {
            JOptionPane.showMessageDialog(this, "No one bill selected!");
            
            return;
        }
        
        // Get selected orders
        List<Long> selectedIds = new ArrayList<>();
        
        for (TreePath path : selectionPaths) { // for every selected order
            long billId = Long.valueOf(String.valueOf(
                    path.getPath()[1]).split(" ")[1]);
            
            selectedIds.add(billId);
        }
        
        List<Bill> bills = FileDB.getInstance().getBills();
        
        bills.stream()
                .filter(x -> selectedIds.contains(x.getId()))
                .forEach(x -> {
                    x.setRequestedForPayment(false);
                    x.setBilled(true);
                });
        
        // Write out bills
        FileDB.getInstance().setBills(bills, false);

        // Redraw bills tree
        billsTimer.stop();
        billsTimer.start();
        
        String selectedIdsStr = selectedIds.stream()
                .map(x -> String.valueOf(x))
                .collect(Collectors.joining(", "));
        
        JOptionPane.showMessageDialog(this, "Requests for payment " + selectedIdsStr + " are canceled!");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Find selected bills
        TreePath[] selectionPaths = jTree2.getSelectionPaths();
        
        if (selectionPaths == null) {
            JOptionPane.showMessageDialog(this, "No one bill selected!");
            
            return;
        }
        
        // Get selected orders
        List<Long> selectedIds = new ArrayList<>();
        
        for (TreePath path : selectionPaths) { // for every selected order
            long billId = Long.valueOf(String.valueOf(
                    path.getPath()[1]).split(" ")[1]);
            
            selectedIds.add(billId);
        }
        
        List<Bill> bills = FileDB.getInstance().getBills();
        
        bills.stream()
                .filter(x -> selectedIds.contains(x.getId()))
                .forEach(x -> x.setRequestedForPayment(true));
        
        // Write out bills
        FileDB.getInstance().setBills(bills, false);

        // Redraw bills tree
        billsTimer.stop();
        billsTimer.start();
        
        String selectedIdsStr = selectedIds.stream()
                .map(x -> String.valueOf(x))
                .collect(Collectors.joining(", "));
        
        JOptionPane.showMessageDialog(this, "Bills " + selectedIdsStr + " requested for payment!");
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Administrator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTree jTree1;
    private javax.swing.JTree jTree2;
    // End of variables declaration//GEN-END:variables
}
