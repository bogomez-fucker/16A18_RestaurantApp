package restaurant.view;

import restaurant.model.*;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;

/**
 * Payment GUI.
 * @author User
 */
public class Payment extends JFrame {
    
    private final User user;
    private final Order order;
    private JButton payButton;
    private JLabel headerLabel;
    private JLabel amountHintLabel;
    private JLabel amountLabel;
    private JLabel balanceHintLabel;
    private JLabel balanceLabel;
    private JScrollPane orderTableScrollPane;
    private JTable orderTable;
    
    /**
     * Creates new form Payment
     */
    public Payment(User user, Order order) {
        initComponents();
        
        this.user = user;
        this.order = order;
        
        double amount = getAmount(order);
        
        balanceLabel.setText(String.valueOf(user.getMoney()));
        amountLabel.setText(String.valueOf(amount));
        
        DefaultTableModel tableModel = (DefaultTableModel) orderTable.getModel();
        
        // Clean up
        for (int i = tableModel.getRowCount() - 1; i >= 0; i--)
            tableModel.removeRow(i);
        
        Object[] rowData = new Object[Dish.VISIBLE_FIELDS_NUMBER];
        
        // Fill up the table
        for (Dish dish : order.getDishes()) {
            rowData[0] = dish.getName();
            rowData[1] = dish.getDescription();
            rowData[2] = dish.getCookingTime();
            rowData[3] = dish.getPrice();
            
            tableModel.addRow(rowData);
        }
    }
    
    private double getAmount(Order order) {
        return order.getDishes().stream()
                .map(Dish::getPrice)
                .reduce(0.0, (left, right) -> left + right);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        headerLabel = new JLabel();
        orderTableScrollPane = new JScrollPane();
        orderTable = new JTable();
        amountHintLabel = new JLabel();
        amountLabel = new JLabel();
        payButton = new JButton();
        balanceHintLabel = new JLabel();
        balanceLabel = new JLabel();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Restaurant App | Payment");

        headerLabel.setFont(new Font("Tahoma", 1, 18));
        headerLabel.setHorizontalAlignment(SwingConstants.CENTER);
        headerLabel.setText("Payment");

        orderTableScrollPane.setBorder(BorderFactory.createTitledBorder("Your order"));

        orderTable.setAutoCreateRowSorter(true);
        orderTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Description", "Cooking time", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderTableScrollPane.setViewportView(orderTable);

        amountHintLabel.setFont(new Font("Tahoma", 1, 13));
        amountHintLabel.setText("Amount: ");

        amountLabel.setText("0.0");

        payButton.setText("PAY");
        payButton.addActionListener(evt -> jButton1ActionPerformed(evt));

        balanceHintLabel.setFont(new Font("Tahoma", 1, 13));
        balanceHintLabel.setText("Your money: ");

        balanceLabel.setText("0.0");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(orderTableScrollPane, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(headerLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(amountHintLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(amountLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 178, Short.MAX_VALUE)
                        .addComponent(balanceHintLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(balanceLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(payButton, GroupLayout.PREFERRED_SIZE, 115, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(orderTableScrollPane, GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(amountHintLabel)
                    .addComponent(amountLabel)
                    .addComponent(balanceHintLabel)
                    .addComponent(balanceLabel))
                .addGap(13, 13, 13)
                .addComponent(payButton, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }

    private void jButton1ActionPerformed(ActionEvent evt) {
        // Rewrite user balance
        double balance = user.getMoney() - getAmount(order);
        
        if (balance < 0.0) {
            JOptionPane.showMessageDialog(this, "You have not enough money");
            return;
        }
        
        List<User> users = FilesDAO.getInstance().getUsers();
        
        users.stream()
                .filter(x -> x.equals(user))
                .forEach(x -> x.setMoney(balance));
        
        FilesDAO.getInstance().setUsers(users, false);
        
        // Rewrite bill status
        List<Bill> bills = FilesDAO.getInstance().getBills();
        
        bills.stream()
                .filter(x -> x.getId_order() == order.getId())
                .forEach(x -> {
                    x.setBilled(true);
                    x.setRequestedForPayment(false);
                });
        
        FilesDAO.getInstance().setBills(bills, false);
        
        // User feedback
        balanceLabel.setText(String.valueOf(balance));
        JOptionPane.showMessageDialog(this, "Paid successfully");
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }
}
